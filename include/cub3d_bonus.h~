/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cub3d_bonus.h                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mlebard <mlebard@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/01/25 16:07:04 by mlebard           #+#    #+#             */
/*   Updated: 2021/04/20 19:12:28 by mlebard          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef CUB3D_BONUS_H
# define CUB3D_BONUS_H

# include "../libft/libft.h"
# include <math.h>
# include <sys/types.h>
# include <sys/stat.h>
# include <fcntl.h>
# include <sys/errno.h>
# include <stdio.h>
# include "../mlx/mlx.h"
# include <X11/Xlib.h>
# include <X11/keysym.h>
# include <time.h>
# include <stdlib.h>

/*
** Error Defines
*/

# define SUCCESS			0
# define ERR_MALLOC			-1
# define ERR_NOT_CUB		-2
# define ERR_NOT_FILE		-3
# define ERR_WRONG_ID		-4
# define ERR_DUP_ID			-5
# define ERR_ARG_NB			-6
# define ERR_BAD_ARG		-7
# define ERR_SET_OPEN		-8
# define ERR_SET_CLOSE		-9
# define ERR_EOF			-10
//# define ERR_MISSING_SET	-10
//# define ERR_MISSING_MAP	-11
# define ERR_MAP_BORDERS	-11
# define ERR_MAP_INVALID	-12
# define ERR_MAP_OPEN		-13
# define ERR_MAP_PLAYERS	-14
# define ERR_MAP_NOPLAYER	-15
# define ERR_MAP_SMALL		-16
# define ERR_MAP_LINE		-17
# define ERR_MINI_SMALL		-18

/*
** ID Defines*/

# define ID_MAP				1
# define ID_MAPF			2
# define ID_MAPC			3

typedef enum	e_set_id
{
	DUP_ID = -2,
	WRONG_ID,
	RES,
	WALL_TEX,
	SP_TEX,
	FLOOR_TEX,
	CEIL_TEX,
	SKYBOX,
	DECO_SPRITE,
	COLLECT_SPRITE,
	MINIMAP
}				t_set_id;

/*
** Texture Defines
*/

# define WALL_TEX_NBR		5
# define FLOOR_TEX_NBR		5
# define CEIL_TEX_NBR		5
# define SP_TEX_NBR			5

/*
** Key Flag Defines
*/

# define KEY_W				0x1
# define KEY_A				0x2
# define KEY_S				0x4
# define KEY_D				0x8
# define KEY_RG_ARR			0x10
# define KEY_LF_ARR			0x20
# define KEY_UP_ARR			0x40
# define KEY_DW_ARR			0x80
# define KEY_SPACE			0x100
# define KEY_CTRL			0x200
# define KEY_SHIFT			0x400

/*
** Event Defines
*/

# define EVENT_COLLECT		1

/*
** Other Defines
*/

# define SET_NBR			9
# define SHADE_DIST			3

typedef struct	s_pos
{
	int			x;
	int			y;
}				t_pos;

typedef struct	s_posmax
{
	intmax_t	x;
	intmax_t	y;
}				t_posmax;

typedef struct	s_dpos
{
	double		x;
	double		y;
}				t_dpos;

typedef struct	s_vect
{
	double		x;
	double		y;
}				t_vect;

typedef struct	s_triangle
{
	t_pos		v1;
	t_pos		v2;
	t_pos		v3;
}				t_triangle;

typedef struct	s_sprite
{
	int			id;
	double		x;
	double		y;
	double		dist;
	int			collision;
	int			collect;
	int			hmove;
	int			hdiv;
	int			wdiv;
	int			tex;
}				t_sprite;

typedef struct	s_img
{
	void		*img;
	char		*addr;
	int			bpp;
	int			linelen;
	int			height;
	int			width;
	int			endi;
}				t_img;

typedef struct	s_floorcast
{
	t_dpos		wall;
	t_dpos		pos;
	double		currdist;
}				t_floorcast;

typedef struct	s_skybox
{
	t_dpos		raydirmin;
	t_dpos		raydirmax;
	double		rightside;
	double		leftside;
	t_dpos		step;
	double		pitch_adjust;
	t_pos		texel;
}				t_skybox;

typedef struct	s_raycast
{
	t_vect		dir;
	t_pos		pos;
	t_dpos		delt;
	t_dpos		dist;
	t_pos		step;
	int			side;
	double		perp_dist;
	double		hit;
	int			wallheight;
	int			walltop;
	int			wallbot;
}				t_raycast;

typedef struct	s_spritecast
{
	t_dpos		transform;
	int			screenx;
	int			height;
	int			width;
	int			move_screen;
	int			top;
	int			bot;
	int			left;
	int			right;
	int			stripe;
	t_posmax	texel;
}				t_spritecast;

typedef struct	s_wall
{
	int			height;
	int			top;
	int			bot;
	double		hit;
	t_posmax	texel;
	double		step;
	double		texpos;
}				t_wall;

typedef struct	s_player
{
	double		x;
	double		y;
	double		z;
	t_vect		dir;
	t_vect		plane;
	double		pitch;
	double		movspeed;
	double		rotspeed;
	int			sprites_collected;
}				t_player;

typedef struct	s_textures
{
	t_img		*wall;
	t_img		*floor;
	t_img		*ceil;
	t_img		*sp;
	t_img		sky;
}				t_textures;

typedef struct	s_minimap
{
	int			on;
	int			off;
	t_pos		ratio;
	t_pos		limits;
	t_pos		range;
	int			tilesize;
	int			wall_color;
	int			floor_color;
	int			player_color;
}				t_minimap;

/*
** NOT a linked list - *link ptr points to another potential event to interact
** with, such as linked teleporters needing a pointer to each other
*/

typedef struct			s_event
{
	int					id;
	int					type;
	double				x;
	double				y;
	double				range;
	struct s_event		*link;
}						t_event;

typedef struct	s_cub
{
	int				fd;
	void			*mlx;
	void			*win;
	t_pos			res;
	char			set_id[3];
	t_player		*play;
	t_raycast		*ray;
	t_spritecast	*sprite;
	int				sp_nb;
	t_list			*sp;
	t_list			*event;
	int				event_count;
	t_floorcast		*floor;
	t_skybox		*sky;
	t_textures		*tex;
	char			**map;
	char			**mapf;
	char			**mapc;
	t_minimap		*mini;
	int				map_w;
	int				map_h;
	double			*z;
	double			*lookupdist;
	uint32_t		keys;
	int				save;
}				t_cub;

/*
** Struct Utils
*/

t_pos			get_pos(int x, int y);
t_triangle		get_triangle(t_pos v1, t_pos v2, t_pos v3);

/*
** Parse Manager
*/

int				parse_cub(t_file map, t_cub *cub);

/*
** Parser: Settings
*/

t_set_id		get_id(char *arg);
int				get_settings(char **args, int fd, int *check, t_cub *cub);
int				get_next_setting(char ***args, int fd);

/*
** Setting Handlers
*/

int		open_set(int fd);
int		close_set(int fd);
int		handle_textures(int fd, t_cub *cub, int limit, t_img *path);
int		handle_resolution(char **args, t_cub *cub);
int		handle_skybox(char **args, t_cub *cub);
int		handle_deco_sprites(int fd, t_cub *cub);
int		handle_collect_sprites(int fd, t_cub *cub);
int		handle_minimap(char **args, t_cub *cub);
int		add_deco_sprite(char **args, t_cub *cub);
int		add_collect_sprite(char **args, t_cub *cub);
int		get_tex_nbr(char **args, int limit);
int		check_tex(char **args, int ret, int limit, t_img *path);
int		assign_texture(char **args, t_cub *cub, t_img *img);

/*
** Parser: Map
*/

int			parse_map(t_file mapfile, t_cub *cub);
int			check_map(t_cub *cub);
int			handle_map_floor(char **args, t_file mapfile, t_cub *cub);
int			handle_map_ceil(char **args, t_file mapfile, t_cub *cub);
int			check_map_id(char **args, t_cub *cub, int map_id);


/*
** Minilibx Utils
*/

void			my_mlx_pixel_put(t_img *img, int x, int y, int color);
int				get_pixel(intmax_t x, intmax_t y, t_img img);
int				add_shade(double dist, int color);
unsigned int	get_img_color_at_index(t_img *img, int x, int y);
t_img			make_img(void*mlx, int x, int y);
void			fill_img(int limitx, int limity, t_img *img, int color);
void			draw_circle(t_pos pos, int r, int color, t_img *img);
void			horline(int hor, t_pos coord, int color, t_img *img);
void			vertline(int vert, t_pos coord, int color, t_img *img);
void			vertline_to_buff(int vert, t_pos coord, int color,
				int **spritereen);
void			draw_line(t_pos v1, t_pos v2, int color, t_img *img);
void			draw_triangle(t_triangle tri, int color, t_img *minimap);

	/*
** Minimap
*/

int				init_minimap(t_cub *cub,t_minimap *mini);
void			display_minimap(t_cub *cub, t_minimap *mini, t_img *frame);
//void			display_player(t_cub *cub, t_pos pos, int ratio,
//				t_img *minimap);

/*
** Game Loop
*/

void			start_gameloop(t_cub *cub);

/*
** Key_Hooks
*/

int				key_press(int keycode, t_cub *cub);
int				key_release(int keycode, t_cub *cub);
int				click_cross(t_cub *cub);

/*
** Raycaster
*/

int				raycasting(t_cub *cub, t_img *frame);

/*
** Vertical Caster
*/

void			floorcasting(t_cub *cub, t_floorcast *floor, int x,
				t_img *frame);
void			init_skybox(t_cub *cub, t_skybox *sky, t_player *play);
void			draw_skybox(t_cub *cub, int x, int y, t_img *frame);

/*
** Wall Caster
*/

void			wallcasting(t_cub *cub, t_raycast *ray, t_img *frame);
void			draw_wall(t_cub *cub, t_raycast *ray, int x, t_img *frame);

/*
** Sprite Caster
*/

void			get_sprite_dist(t_cub *cub, t_list *lst);
int				sort_sprites(t_sprite *sp1, t_sprite *sp2);
void			spritecasting(t_cub *cub, t_spritecast *sprite, t_img *frame);
void			draw_sprite(t_cub *cub, t_spritecast *sprite, t_sprite *sp,
				t_img *frame);

/*
** Movement & Camera
*/

int				update_pos(t_cub *cub);

void			move_forward(t_cub *cub, double speed);
void			move_backwards(t_cub *cub, double speed);
void			strafe_left(t_cub *cub, double speed);
void			strafe_right(t_cub *cub, double speed);

void			turn_left(t_cub *cub, double rotspeed);
void			turn_right(t_cub *cub, double rotspeed);
void			look_up(t_cub *cub, double rotspeed);
void			look_down(t_cub * cub, double rotspeed);
/*
** Screenshot
*/

int				cub_img_to_bmp(t_img screen, const char *filename, t_cub *cub);

/*
** Exitting & Freeing
*/

void			free_cub(t_cub *cub);
int				exit_done(t_cub *cub);

/*
** Errors
*/

int				cub_error(int errcode, char *str);
int				setting_error(char **args, int errcode, char *str);
int				map_error(t_cub *cub, int y, int x, int errcode);

#endif
